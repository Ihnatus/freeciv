/*****************************************************************************
 Freeciv - Copyright (C) 2005 - The Freeciv Project
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
*****************************************************************************/

/*****************************************************************************
  ADVERTISEMENT: do not attempt to change the name of the API functions.
  They *must* be compatible between the minor Freeciv versions within the
  same major version. If you really like to change a function name, be sure
  to keep also the old one running.
*****************************************************************************/

$#ifdef HAVE_CONFIG_H
$#include <fc_config.h>
$#endif

/* common/scriptcore */
$#include "luascript_types.h"

/* client/luascript */
$#include "api_client_base.h"
$#include "script_client.h"

/* Chat module. */

module chat {
  void api_client_chat_base
    @ base (lua_State *L, const char *message);
}

$[

-- Chat module implementation.

function chat.msg(fmt, ...)
  chat.base(string.format(fmt, ...))
end

$]

/* client module */
module client {
  Player *api_client_player @ player(lua_State *L);
  void api_client_center @ center(lua_State *L, Tile* tile);
  const char *api_client_state @ state(lua_State *L);
  const char *api_client_tileset_name @ tileset_name(lua_State *L);
  lua_Object api_client_option_get
    @ option (lua_State *L, const char *name, bool is_server_opt);
  const char* api_client_option_next
    @ option_next (lua_State *L, const char *name, bool is_server_opt);
}

$[
--no () for client.player etc., pseudo-tables for options
--Currently, client has no metatable, but ever may get, thus so polymorphic
do
  local cli_mt = getmetatable(client)
  local clindex
  local oo = {state = client.state,
    tileset_name = client.tileset_name,
    player = client.player}
  local opt, sopt, cliopt, clinext
    = {}, {}, client.option, client.option_next
  if cli_mt then
    clindex = cli_mt.__index
  else
    cli_mt = {}
    setmetatable(client, cli_mt)
  end
  for k, _ in pairs(oo) do client[k] = nil end --access via __index
  if not clindex then
    clindex = function(t, k) return rawget(t, k) end
  end
  local function smtos(o, is_srv)
    setmetatable(o, {
      __index = function(t, n)
        return cliopt(n, is_srv)
      end,
      __pairs = function(t)
        return function(t1, i)
            local n = clinext(i, is_srv)
            return n, t1[n]
          end, t, nil
      end
    })
  end
  smtos(opt, false)
  smtos(sopt, true)
  cli_mt.__index = function(c, n)
    if oo[n] then
      return oo[n]()
    elseif n == "option" then
      return opt
    else
      return clindex(c, n)
    end
  end
  game.server_option = sopt
end
$]
